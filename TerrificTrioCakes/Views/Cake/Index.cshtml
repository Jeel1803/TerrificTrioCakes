@using X.PagedList
@using X.PagedList.Mvc.Core;
@using X.PagedList.Web.Common;

<!DOCTYPE html>
<html lang="en">
    <head>
    @*using fontawesome kit for icons styling*@
    <script src="https://kit.fontawesome.com/1269185472.js" crossorigin="anonymous"></script>
</head>

@model IPagedList<TerrificTrioCakes.Models.DB.Cake>

 @if (User.IsInRole("Admin") | User.IsInRole("Staff"))
{
    <p>
    <a asp-action="Create" class="btn btn-success btn-lg"> <i class="fa-sharp fa-solid fa-circle-plus"></i></a>
</p>
}

<div class="row justify-content-center search-products">
    <div class="col-12 col-md-10 col-lg-8">
        <form class="card card-sm" id="searchForm" action="/Cake/Index" method="get" autocomplete="off">
            <div class="card-body row no-gutters align-items-center">                           
                <div class="col">
                    <input class="form-control form-control-lg form-control-borderless"  type="text" id="searchString" name="searchString"
                   autocomplete="off" onkeyup="XAjaxRequest(this.value);" placeholder="Search cakes">
                   <div id="autoSuggestContainer" class="autosugg"></div>
                </div> </br>
                
                <div class="col-auto">
                    <button class="btn btn-lg btn-success" type="submit">Search</button>
                </div>
                
            </div>
        </form>

        <form>
            <div class="form-check form-check-inline">
                <input class="form-check-input" type="radio" name="radio" id="inlineRadio1" value="Standard">
                <label class="form-check-label" for="inlineRadio1">Standard</label>
            </div>
            <div class="form-check form-check-inline">
                <input class="form-check-input" type="radio" name="radio" id="inlineRadio1" value="Vegan">
                <label class="form-check-label" for="inlineRadio1">Vegan</label>
            </div>
            <div class="form-check form-check-inline">
                <input class="form-check-input" type="radio" name="radio" id="inlineRadio1" value="Eggless">
                <label class="form-check-label" for="inlineRadio1">Eggless</label>
            </div>
            <div class="form-check form-check-inline col-auto card-body row no-gutters align-items-center">
                <button class="btn btn-lg btn-success" type="submit" value="Filter">Filter</button>
            </div>
        </form>
        
    </div>
    <!--end of col-->
</div>

<div class="row row-cols-1 row-cols-md-3 g-4 product-row products-page">
    @foreach(var item in Model)
    {
        <div class="col">
            <div class="card">
                <a asp-action="Details" asp-route-id="@item.Id">
                    <img src="~/images/@item.Image" class="card-img-top">                    
                </a>
                <div class="card-body text-center card-body-header">
                    <a asp-action="Details" asp-route-id="@item.Id">
                        <h5 class="card-title">@Html.DisplayFor(modelItem => item.Name)</h5>
                        <h6 class="card-title cake-cat">@Html.DisplayFor(modelItem => item.Categories.Name) Cake</h6>
                    </a>
                    @*<p class="card-text">@Html.DisplayFor(modelItem => item.Description)</p>*@
                    <p class="card-text">@Html.Raw(item.Description)</p>
                </div>
                <div class="card-body  d-flex justify-content-evenly card-body-footer">
                    <h6 class="card-title">$@Html.DisplayFor(modelItem => item.Price) <span class="currency">nzd</span></h6>
                    <a asp-controller="Cart" asp-action="Buy" asp-route-id="@item.Id" class="btn btn-primary">Add To Cart</a>                    
                </div>
            </div>
        </div>
    }
</div>



@*code for display number of pages *@
@Html.PagedListPager(Model, page => Url.Action("Index",
        new { Page = page }),
        new PagedListRenderOptions
        {
            LiElementClasses = new string[] { "page-item" },
            PageClasses = new string[] { "page-link" }
    })



@*Javascript for the auto suggestion*@
<script type="text/javascript">
    function XAjaxRequest(searchString) {
        if (searchString.length < 1) {
            //on deleting input to enter something else, needs clear
            document.getElementById("autoSuggestContainer").innerHTML = "";
            return;
        }
        //alert("testing searchString=" + searchString);
        var xmlhttp;
        xmlhttp = new XMLHttpRequest();
        var url = "/Cake/IndexAJAX?searchString=" + searchString;
        // open connection, GET is quick and simple, false: sync page will freeze
        xmlhttp.open("GET", url, false);
        // send the request to IndexAJAX
        xmlhttp.send();
        document.getElementById("autoSuggestContainer").style.display = "block";
        //need to clear out the container for a fresh auto-suggest list
        //else the auto-suggest list can keep growing and growing with additional user keyups
        document.getElementById("autoSuggestContainer").innerHTML = "";

        var messageObject = JSON.parse(xmlhttp.responseText); // receive the respose text

        var autoSuggestions = "";

        for (var i = 0; i < messageObject.length; i++) {
            //HTML code generation demo
            //Works together with the ".innerHTML" statement after the end of this "for" block
            autoSuggestions +=
                "<input type=\"button\" value=\"" + messageObject[i].Name + "\" "
                + "onclick=\"document.getElementById('searchString').value = this.value; document.getElementById('searchForm').submit();\" "
                + "style =\"width: 280px\" />";
            autoSuggestions += "<br />";
        }
        //place the generated buttons HTML code inside the display div
        document.getElementById("autoSuggestContainer").innerHTML = autoSuggestions;
    }
</script>

